// #6 - Dijkstra's Algorithm

#include<bits/stdc++.h>
using namespace std;

int findMinIndex(vector<int>& distance,vector<bool>& visited){
    int minIndex, minValue = INT_MAX;
    
    for(int i=0;i<distance.size();i++){
        if(!visited[i] && distance[i] < minValue){
            minValue = distance[i];
            minIndex = i;
        }
    }
    return minIndex;
}

vector<int> dijkstraAlgo(int vertex, int source, vector<vector<int>>& adjMatrix){
    vector<int> distance(vertex, INT_MAX);
    vector<bool> visited(vertex, false);
    distance[source] = 0;

    // for the last vertex all the other vertices are visited, so no need to find min-distance for that vertex, as it already have the min-distance
    for(int i=0;i<vertex - 1;i++){
        int minVertex = findMinIndex(distance, visited);
        visited[minVertex] = true;
        
        for(int j=0;j<vertex;j++){
            if(!visited[j] && distance[minVertex] != INT_MAX && adjMatrix[minVertex][j] && distance[minVertex] + adjMatrix[minVertex][j] < distance[j]){
                distance[j] = distance[minVertex] + adjMatrix[minVertex][j];
            }
        }
    }
    return distance;
}

void print(int source, vector<int>& distance){
    for(int i=0;i<distance.size();i++){
        cout << source << " to " << i << " Distance = " << distance[i] << endl;
    }
}

void solve(int vertex, vector<vector<int>>& adjList){
    int source;
    cout<<"Enter the Source Vertex: ";
    cin>>source;
    
    // converting adjList into adjMatrix
    vector<vector<int>> adjMatrix(vertex, vector<int>(vertex, 0));
    for(int i=0;i<adjList.size();i++){
        int u = adjList[i][0];
        int v = adjList[i][1];
        int w = adjList[i][2];
        
        adjMatrix[u][v] = w;
        adjMatrix[v][u] = w;
    }
    
    vector<int> distance = dijkstraAlgo(vertex, source, adjMatrix);
    print(source, distance);
}

int main(){
    int vertex, edges;
    cout<<"Enter the No. of Vertices and Edges: ";
    cin >> vertex >> edges;
    
    vector<vector<int>> adjList(edges, vector<int>(3));
    cout<<"Enter Edges in Source-Destination-Weight format:\n";
    for(int i=0;i<edges;i++){
        cin >> adjList[i][0] >> adjList[i][1] >> adjList[i][2];
    }
    
    solve(vertex, adjList);
    
    return 0;
}


/* 
--------SAMPLE INPUT & OUTPUT-----------
-----------Sample Input 1-----------
Sample Graph Image --> https://www.geeksforgeeks.org/wp-content/uploads/Fig-11.jpg
Enter the No. of Vertices and Edges: 9 14
Enter Edges in Source-Destination-Weight format:
0 1 4
1 2 8
2 3 7
3 4 9
4 5 10
5 6 2
6 7 1
7 0 8
1 7 11
7 8 7
2 8 2
6 8 6
2 5 4
3 5 14
Enter the Source Vertex: 0
0 to 0 Distance = 0
0 to 1 Distance = 4
0 to 2 Distance = 12
0 to 3 Distance = 19
0 to 4 Distance = 21
0 to 5 Distance = 11
0 to 6 Distance = 9
0 to 7 Distance = 8
0 to 8 Distance = 14

*/
